# Generated by Django 5.1.6 on 2025-04-13 19:39

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Robo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='O nome do robô de trading.', max_length=255, verbose_name='Nome')),
                ('description', models.TextField(blank=True, help_text='Descrição detalhada da estratégia do robô.', verbose_name='Descrição')),
                ('logo', models.ImageField(blank=True, help_text='Imagem do logotipo do robô.', null=True, upload_to='robo_logos/', verbose_name='Logotipo')),
                ('performance_fee', models.FloatField(default=0.0, help_text='Percentual da taxa de performance cobrada pelo robô.', verbose_name='Taxa de Performance')),
                ('management_fee', models.FloatField(default=0.0, help_text='Percentual da taxa de gestão cobrada pelo robô.', verbose_name='Taxa de Gestão')),
                ('rate', models.FloatField(default=0.0, help_text='Taxa de retorno ou métrica de desempenho.', verbose_name='Taxa de Retorno')),
                ('amount', models.DecimalField(decimal_places=2, default=0.0, help_text='Valor total investido ou gerenciado.', max_digits=12, verbose_name='Valor')),
                ('rebalancing', models.BooleanField(default=False, help_text='Indica se o robô suporta rebalanceamento automático.', verbose_name='Rebalanceamento')),
                ('tax_inspection', models.BooleanField(default=False, help_text='Indica se a inspeção tributária está habilitada para este robô.', verbose_name='Inspeção Tributária')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data e hora em que o robô foi criado.', verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Data e hora da última atualização do robô.', verbose_name='Atualizado em')),
                ('is_active', models.BooleanField(default=True, help_text='Indica se o robô está atualmente ativo.', verbose_name='Ativo')),
                ('user', models.ManyToManyField(blank=True, help_text='Usuários associados a este robô.', related_name='robots', to=settings.AUTH_USER_MODEL, verbose_name='Usuários')),
            ],
            options={
                'verbose_name': 'Robô',
                'verbose_name_plural': 'Robôs',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Performance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='Data do registro de desempenho.', verbose_name='Data')),
                ('cumulative_return', models.FloatField(help_text='Percentual de retorno acumulado desde o início.', validators=[django.core.validators.MinValueValidator(-100.0)], verbose_name='Retorno Cumulativo (%)')),
                ('daily_return', models.FloatField(help_text='Percentual de retorno para este dia específico.', validators=[django.core.validators.MinValueValidator(-100.0)], verbose_name='Retorno Diário (%)')),
                ('amount', models.DecimalField(decimal_places=2, default=0.0, help_text='Valor total da carteira gerenciada pelo robô nesta data.', max_digits=12, verbose_name='Valor da Carteira')),
                ('drawdown', models.FloatField(help_text='Percentual de drawdown atual em relação ao pico.', validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Drawdown Atual (%)')),
                ('max_drawdown', models.FloatField(help_text='Maior percentual de drawdown observado até esta data.', validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Drawdown Máximo (%)')),
                ('max_drawdown_duration', models.IntegerField(default=0, help_text='Maior duração do drawdown, em dias.', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Duração do Drawdown Máximo (Dias)')),
                ('sharpe_ratio', models.FloatField(blank=True, help_text='Métrica de retorno ajustado ao risco (maior é melhor).', null=True, verbose_name='Índice Sharpe')),
                ('sortino_ratio', models.FloatField(blank=True, help_text='Métrica de retorno ajustada ao risco de queda.', null=True, verbose_name='Índice Sortino')),
                ('volatility', models.FloatField(help_text='Volatilidade dos retornos, em base anual.', validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Volatilidade Anualizada (%)')),
                ('profit_factor', models.FloatField(help_text='Relação entre lucros brutos e perdas brutas.', validators=[django.core.validators.MinValueValidator(0.0)], verbose_name='Fator de Lucro')),
                ('win_rate', models.FloatField(help_text='Percentual de trades vencedores.', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MinValueValidator(100.0)], verbose_name='Taxa de Vitórias (%)')),
                ('trade_count', models.IntegerField(default=0, help_text='Quantidade de trades realizados nesta data.', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Número de Trades')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data e hora em que o registro foi criado.', verbose_name='Criado em')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Data e hora da última atualização do registro.', verbose_name='Atualizado em')),
                ('robo', models.ForeignKey(help_text='O robô de trading associado a este registro de desempenho.', on_delete=django.db.models.deletion.CASCADE, related_name='performances', to='advisors.robo', verbose_name='Robô')),
            ],
            options={
                'verbose_name': 'Desempenho',
                'verbose_name_plural': 'Desempenhos',
                'ordering': ['robo__name', '-date'],
                'indexes': [models.Index(fields=['robo', 'date'], name='advisors_pe_robo_id_d9f4dc_idx'), models.Index(fields=['date'], name='advisors_pe_date_20587b_idx')],
                'constraints': [models.UniqueConstraint(fields=('robo', 'date'), name='unique_robo_date')],
            },
        ),
    ]
